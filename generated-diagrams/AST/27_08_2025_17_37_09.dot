digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555565608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555565608" -> "0x555555567008";
  "0x555555567008" [label="block\nType: Block Node\nLine: 0"];
  "0x555555567008" -> "0x5555555670b8";
  "0x5555555670b8" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x5555555670b8" -> "0x555555567498";
  "0x555555567498" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567498" -> "0x5555555674f8";
  "0x5555555674f8" [label="expression\nType: Expression Node\nLine: 1"];
  "0x5555555674f8" -> "0x555555567558";
  "0x555555567558" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567008" -> "0x555555567168";
  "0x555555567168" [label="!b2\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567168" -> "0x555555567318";
  "0x555555567318" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567318" -> "0x555555567378";
  "0x555555567378" [label="expression\nType: Expression Node\nLine: 1"];
  "0x555555567378" -> "0x5555555673d8";
  "0x5555555673d8" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567008" -> "0x555555567638";
  "0x555555567638" [label="!cc\nType: Decimal Literal Node\nLine: 2"];
  "0x555555567008" -> "0x5555555676f8";
  "0x5555555676f8" [label="!d\nType: Int Variable Declaration Node\nLine: 3"];
  "0x555555567008" -> "0x555555567738";
  "0x555555567738" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x555555567738" -> "0x5555555677b8";
  "0x5555555677b8" [label="expression\nType: Expression Node\nLine: 4"];
  "0x5555555677b8" -> "0x555555567838";
  "0x555555567838" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x555555567008" -> "0x5555555678b8";
  "0x5555555678b8" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x5555555678b8" -> "0x555555567918";
  "0x555555567918" [label="expression\nType: Expression Node\nLine: 5"];
  "0x555555567918" -> "0x555555567998";
  "0x555555567998" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x555555567008" -> "0x5555555679f8";
  "0x5555555679f8" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x5555555679f8" -> "0x555555567778";
  "0x555555567778" [label="expression\nType: Expression Node\nLine: 6"];
  "0x555555567778" -> "0x555555567ae8";
  "0x555555567ae8" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x555555567008" -> "0x555555567b68";
  "0x555555567b68" [label="if\nType: IF Node\nLine: 7"];
  "0x555555567b68" -> "0x555555569148";
  "0x555555569148" [label="expression\nType: Expression Node\nLine: 7"];
  "0x555555569148" -> "0x5555555691c8";
  "0x5555555691c8" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555569148" -> "0x555555569248";
  "0x555555569248" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555567b68" -> "0x5555555692a8";
  "0x5555555692a8" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x5555555692a8" -> "0x555555569308";
  "0x555555569308" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569308" -> "0x555555569388";
  "0x555555569388" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x5555555692a8" -> "0x555555569408";
  "0x555555569408" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569408" -> "0x555555569468";
  "0x555555569468" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555567b68" -> "0x5555555694e8";
  "0x5555555694e8" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x5555555694e8" -> "0x555555569578";
  "0x555555569578" [label="expression\nType: Expression Node\nLine: 9"];
  "0x555555569578" -> "0x5555555695d8";
  "0x5555555695d8" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x5555555694e8" -> "0x555555569658";
  "0x555555569658" [label="expression\nType: Expression Node\nLine: 9"];
  "0x555555569658" -> "0x5555555696b8";
  "0x5555555696b8" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x555555567008" -> "0x555555569738";
  "0x555555569738" [label="for\nType: FOR Node\nLine: 10"];
  "0x555555569738" -> "0x5555555697f8";
  "0x5555555697f8" [label="FOR Expression\nType: FOR Statement Node\nLine: 10"];
  "0x5555555697f8" -> "0x555555569878";
  "0x555555569878" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 10"];
  "0x555555569878" -> "0x555555569908";
  "0x555555569908" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x555555569908" -> "0x555555569988";
  "0x555555569988" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569988" -> "0x555555569a08";
  "0x555555569a08" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x5555555697f8" -> "0x555555569a88";
  "0x555555569a88" [label="FOR condition\nType: FOR Statement Node\nLine: 10"];
  "0x5555555697f8" -> "0x555555569c28";
  "0x555555569c28" [label="FOR control\nType: FOR Statement Control Node\nLine: 10"];
  "0x555555569738" -> "0x555555569ed8";
  "0x555555569ed8" [label="block\nType: Block Node\nLine: 10"];
  "0x555555569ed8" -> "0x555555569f18";
  "0x555555569f18" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x555555569f18" -> "0x555555569f98";
  "0x555555569f98" [label="expression\nType: Expression Node\nLine: 11"];
  "0x555555569f98" -> "0x55555556a018";
  "0x55555556a018" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x555555569f18" -> "0x55555556a098";
  "0x55555556a098" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556a098" -> "0x55555556a0f8";
  "0x55555556a0f8" [label="!d\nType: Variable Reference Node\nLine: 11"];
  "0x555555567008" -> "0x555555569ae8";
  "0x555555569ae8" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569ae8" -> "0x555555569b48";
  "0x555555569b48" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569ae8" -> "0x555555569bc8";
  "0x555555569bc8" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x555555567008" -> "0x555555569cb8";
  "0x555555569cb8" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569cb8" -> "0x555555569d68";
  "0x555555569d68" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569cb8" -> "0x555555569de8";
  "0x555555569de8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569cb8" -> "0x555555569e48";
  "0x555555569e48" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x555555567008" -> "0x55555556b1b8";
  "0x55555556b1b8" [label="__declaracao\nType: Function Declaration Node\nLine: 14"];
  "0x55555556b1b8" -> "0x55555556b218";
  "0x55555556b218" [label="block\nType: Block Node\nLine: 14"];
  "0x55555556b218" -> "0x55555556b2e8";
  "0x55555556b2e8" [label="!gg\nType: Int Variable Declaration Node\nLine: 15"];
  "0x55555556b2e8" -> "0x55555556b4a8";
  "0x55555556b4a8" [label="=\nType: Assignment Node\nLine: 15"];
  "0x55555556b4a8" -> "0x55555556b508";
  "0x55555556b508" [label="expression\nType: Expression Node\nLine: 15"];
  "0x55555556b508" -> "0x55555556b568";
  "0x55555556b568" [label="8\nType: Int Literal Node\nLine: 15"];
  "0x55555556b218" -> "0x55555556b658";
  "0x55555556b658" [label="!hg\nType: Int Variable Declaration Node\nLine: 16"];
  "0x55555556b658" -> "0x55555556b7f8";
  "0x55555556b7f8" [label="=\nType: Assignment Node\nLine: 16"];
  "0x55555556b7f8" -> "0x55555556b858";
  "0x55555556b858" [label="expression\nType: Expression Node\nLine: 16"];
  "0x55555556b858" -> "0x55555556b8b8";
  "0x55555556b8b8" [label="9\nType: Int Literal Node\nLine: 16"];
  "0x55555556b218" -> "0x55555556b978";
  "0x55555556b978" [label="return\nType: Function Call Node\nLine: 18"];
  "0x55555556b978" -> "0x55555556b9e8";
  "0x55555556b9e8" [label="expression\nType: Expression Node\nLine: 18"];
  "0x55555556b9e8" -> "0x55555556ba48";
  "0x55555556ba48" [label="!gg\nType: Variable Reference Node\nLine: 18"];
  "0x55555556b9e8" -> "0x55555556bac8";
  "0x55555556bac8" [label="8\nType: Int Literal Node\nLine: 18"];
  "0x55555556b218" -> "0x55555556bb28";
  "0x55555556bb28" [label="for\nType: FOR Node\nLine: 20"];
  "0x55555556bb28" -> "0x55555556bb88";
  "0x55555556bb88" [label="FOR Expression\nType: FOR Statement Node\nLine: 20"];
  "0x55555556bb88" -> "0x55555556bc08";
  "0x55555556bc08" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 20"];
  "0x55555556bc08" -> "0x55555556bce8";
  "0x55555556bce8" [label="!i\nType: Int Variable Declaration Node\nLine: 20"];
  "0x55555556bce8" -> "0x55555556bea8";
  "0x55555556bea8" [label="=\nType: Assignment Node\nLine: 20"];
  "0x55555556bea8" -> "0x55555556bf08";
  "0x55555556bf08" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556bf08" -> "0x55555556bf68";
  "0x55555556bf68" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556bb88" -> "0x55555556c028";
  "0x55555556c028" [label="FOR condition\nType: FOR Statement Node\nLine: 20"];
  "0x55555556bb88" -> "0x55555556c1e8";
  "0x55555556c1e8" [label="FOR control\nType: FOR Statement Control Node\nLine: 20"];
  "0x55555556bb28" -> "0x55555556c428";
  "0x55555556c428" [label="block\nType: Block Node\nLine: 20"];
  "0x55555556c428" -> "0x55555556c488";
  "0x55555556c488" [label="!lpa\nType: Int Variable Declaration Node\nLine: 21"];
  "0x55555556c488" -> "0x55555556c648";
  "0x55555556c648" [label="=\nType: Assignment Node\nLine: 21"];
  "0x55555556c648" -> "0x55555556c6a8";
  "0x55555556c6a8" [label="expression\nType: Expression Node\nLine: 21"];
  "0x55555556c6a8" -> "0x55555556c708";
  "0x55555556c708" [label="0\nType: Int Literal Node\nLine: 21"];
  "0x55555556c428" -> "0x55555556c7c8";
  "0x55555556c7c8" [label="!lpa\nType: Assignment Node\nLine: 23"];
  "0x55555556c7c8" -> "0x55555556c808";
  "0x55555556c808" [label="expression\nType: Expression Node\nLine: 23"];
  "0x55555556c808" -> "0x55555556c888";
  "0x55555556c888" [label="!lpa\nType: Variable Reference Node\nLine: 23"];
  "0x55555556c808" -> "0x55555556c908";
  "0x55555556c908" [label="1\nType: Int Literal Node\nLine: 23"];
  "0x55555556b218" -> "0x55555556c068";
  "0x55555556c068" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c068" -> "0x55555556c108";
  "0x55555556c108" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c068" -> "0x55555556c188";
  "0x55555556c188" [label="20\nType: Int Literal Node\nLine: 20"];
  "0x55555556b218" -> "0x55555556c278";
  "0x55555556c278" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c278" -> "0x55555556c2b8";
  "0x55555556c2b8" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c278" -> "0x55555556c338";
  "0x55555556c338" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c278" -> "0x55555556c398";
  "0x55555556c398" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556b218" -> "0x55555556c968";
  "0x55555556c968" [label="for\nType: FOR Node\nLine: 26"];
  "0x55555556c968" -> "0x55555556c0c8";
  "0x55555556c0c8" [label="FOR Expression\nType: FOR Statement Node\nLine: 26"];
  "0x55555556c0c8" -> "0x55555556ca58";
  "0x55555556ca58" [label="FOR empty initialization\nType: FOR Statement Empty Initialization Node\nLine: 26"];
  "0x55555556c0c8" -> "0x55555556cae8";
  "0x55555556cae8" [label="FOR empty condition\nType: FOR Statement Empty Condition Node\nLine: 26"];
  "0x55555556c0c8" -> "0x55555556cb58";
  "0x55555556cb58" [label="FOR empty control\nType: FOR Statement Empty Control Node\nLine: 26"];
  "0x55555556c968" -> "0x55555556cbf8";
  "0x55555556cbf8" [label="block\nType: Block Node\nLine: 26"];
}
