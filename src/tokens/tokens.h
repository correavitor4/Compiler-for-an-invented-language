#ifndef TOKENS_H
#define TOKENS_H

//TODO: describe each token using comments
typedef enum {
    TOKEN_VAR_DATA_TYPE_INT, // inteiro
    TOKEN_VAR_DATA_TYPE_DECIMAL, // decimal
    TOKEN_VAR_DATA_TYPE_TEXT, // texto
    TOKEN_MAIN_FUNCTION, // principal
    TOKEN_FUNCTION, // funcao
    TOKEN_LEIA, // leia
    TOKEN_ESCREVA, // escreva
    TOKEN_SE, // se
    TOKEN_SENAO, // senao
    TOKEN_PARA, // para
    TOKEN_NOME_FUNCAO, //__something or __Someting or __someThing
    TOKEN_VARIABLE_NAME, // !something or !ometing or !someThing
    TOKEN_PARENTESES_ABRIR, // (
    TOKEN_PARENTESES_FECHAR, // )
    TOKEN_CHAVE_ABRIR, // {
    TOKEN_CHAVE_FECHAR, // }
    TOKEN_VIRGULA, // ,
    TOKEN_PONTO_E_VIRGULA, // ;
    TOKEN_COCHETE_ABRIR,
    TOKEN_COCHETE_FECHAR,
    TOKEN_OPERADOR_SOMA,
    TOKEN_OPERADOR_SUBTRACAO,
    TOKEN_OPERADOR_MULTIPLICACAO,
    TOKEN_OPERADOR_DIVISAO,
    TOKEN_OPERADOR_EXPONENCIACAO,
    TOKEN_OPERADOR_COMPARACAO_IGUAL,
    TOKEN_OPERADOR_COMPARACAO_DIFERENTE,
    TOKEN_OPERADOR_COMPARACAO_MAIOR,
    TOKEN_OPERADOR_COMPARACAO_MAIOR_IGUAL,
    TOKEN_OPERADOR_COMPARACAO_MENOR,
    TOKEN_OPERADOR_COMPARACAO_MENOR_IGUAL,
    TOKEN_OPERADOR_LOGICO_E,
    TOKEN_OPERADOR_LOGICO_OU,
} TokenType;

typedef struct {
    TokenType type;      // Tipo do token
    char *literal;       // String literal do token
    int line;            // Linha onde o token foi encontrado
} Token;

#pragma region return codes
//try parse (general)
#define TRY_PARSE_IS_A_TOKEN_SUCCESS 0
#define TRY_PARSE_IS_A_NOT_TOKEN 1
#define TRY_PARSE_IS_A_TOKEN_ERROR -1

// try parse data type
#define TRY_PARSE_DATA_TYPE_TOKEN_SUCCESS 0
#define TRY_PARSE_DATA_TYPE_TOKEN_NOT_FOUND 1
#define TRY_PARSE_DATA_TYPE_TOKEN_ERROR -1

// try parse function
#define TRY_PARSE_FUNCTION_TOKEN_SUCCESS 0
#define TRY_PARSE_FUNCTION_TOKEN_NOT_FOUND 1
#define TRY_PARSE_FUNCTION_TOKEN_ERROR -1

// try parse console operations
#define TRY_PARSE_CONSOLE_OPS_TOKEN_SUCCESS 0
#define TRY_PARSE_CONSOLE_OPS_TOKEN_NOT_FOUND 1
#define TRY_PARSE_CONSOLE_OPS_TOKEN_ERROR -1

// try parse conditional
#define TRY_PARSE_CONDITIONAL_TOKEN_SUCCESS 0
#define TRY_PARSE_CONDITIONAL_TOKEN_NOT_FOUND 1
#define TRY_PARSE_CONDITIONAL_TOKEN_ERROR -1

// try parse for loop
#define TRY_PARSE_FOR_LOOP_TOKEN_SUCCESS 0
#define TRY_PARSE_FOR_LOOP_TOKEN_NOT_FOUND 1
#define TRY_PARSE_FOR_LOOP_TOKEN_ERROR -1

//try parse function name
#define TRY_PARSE_FUNCTION_NAME_TOKEN_SUCCESS 0
#define TRY_PARSE_FUNCTION_NAME_TOKEN_NOT_FOUND 1
#define TRY_PARSE_FUNCTION_NAME_TOKEN_ERROR -1

// try parse variable
#define TRY_PARSE_VARIABLE_TOKEN_SUCCESS 0
#define TRY_PARSE_VARIABLE_TOKEN_NOT_FOUND 1
#define TRY_PARSE_VARIABLE_TOKEN_ERROR -1

// try parse special token
#define TRY_PARSE_SPECIAL_TOKEN_SUCCESS 0
#define TRY_PARSE_SPECIAL_TOKEN_NOT_FOUND 1
#define TRY_PARSE_SPECIAL_TOKEN_ERROR -1

// try parse arithmetic operator
#define TRY_PARSE_ARITHMETIC_OPERATOR_TOKEN_SUCCESS 0
#define TRY_PARSE_ARITHMETIC_OPERATOR_TOKEN_NOT_FOUND 1
#define TRY_PARSE_ARITHMETIC_OPERATOR_TOKEN_ERROR -1

// try parse comparison operator
#define TRY_PARSE_COMPARISON_OPERATOR_TOKEN_SUCCESS 0
#define TRY_PARSE_COMPARISON_OPERATOR_TOKEN_NOT_FOUND 1
#define TRY_PARSE_COMPARISON_OPERATOR_TOKEN_ERROR -1

// try parse logical operator
#define TRY_PARSE_LOGICAL_OPERATOR_TOKEN_SUCCESS 0
#define TRY_PARSE_LOGICAL_OPERATOR_TOKEN_NOT_FOUND 1
#define TRY_PARSE_LOGICAL_OPERATOR_TOKEN_ERROR -1

#pragma endregion

#endif