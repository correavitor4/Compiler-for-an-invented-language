digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555564608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555564608" -> "0x5555555656e8";
  "0x5555555656e8" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x5555555656e8" -> "0x555555565778";
  "0x555555565778" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555565778" -> "0x5555555657d8";
  "0x5555555657d8" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555564608" -> "0x555555565898";
  "0x555555565898" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x555555565898" -> "0x5555555658d8";
  "0x5555555658d8" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x555555564608" -> "0x555555565918";
  "0x555555565918" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x555555565918" -> "0x555555565988";
  "0x555555565988" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x555555564608" -> "0x5555555659c8";
  "0x5555555659c8" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x5555555659c8" -> "0x555555565a08";
  "0x555555565a08" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x555555564608" -> "0x555555565a68";
  "0x555555565a68" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555564608" -> "0x555555566738";
  "0x555555566738" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555564608" -> "0x555555566778";
  "0x555555566778" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x555555566778" -> "0x5555555667b8";
  "0x5555555667b8" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x555555566778" -> "0x555555566818";
  "0x555555566818" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555564608" -> "0x555555566858";
  "0x555555566858" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x555555566858" -> "0x555555566898";
  "0x555555566898" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x555555566858" -> "0x5555555668f8";
  "0x5555555668f8" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x555555564608" -> "0x555555566938";
  "0x555555566938" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x555555566938" -> "0x555555566978";
  "0x555555566978" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x555555564608" -> "0x5555555669d8";
  "0x5555555669d8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555564608" -> "0x555555566a18";
  "0x555555566a18" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x555555564608" -> "0x555555566ac8";
  "0x555555566ac8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555564608" -> "0x555555566b08";
  "0x555555566b08" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555564608" -> "0x555555566bc8";
  "0x555555566bc8" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x555555564608" -> "0x555555566c08";
  "0x555555566c08" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x555555566c08" -> "0x555555566cd8";
  "0x555555566cd8" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x555555566c08" -> "0x555555566d38";
  "0x555555566d38" [label="!d\nType: Variable Reference Node\nLine: 11"];
}
