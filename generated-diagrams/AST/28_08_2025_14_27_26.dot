digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555565608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555565608" -> "0x555555567338";
  "0x555555567338" [label="block\nType: Block Node\nLine: 0"];
  "0x555555567338" -> "0x5555555673e8";
  "0x5555555673e8" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x5555555673e8" -> "0x5555555677c8";
  "0x5555555677c8" [label="=\nType: Assignment Node\nLine: 1"];
  "0x5555555677c8" -> "0x555555567828";
  "0x555555567828" [label="expression\nType: Expression Node\nLine: 1"];
  "0x555555567828" -> "0x555555567888";
  "0x555555567888" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567338" -> "0x555555567498";
  "0x555555567498" [label="!b2\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567498" -> "0x555555567648";
  "0x555555567648" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567648" -> "0x5555555676a8";
  "0x5555555676a8" [label="expression\nType: Expression Node\nLine: 1"];
  "0x5555555676a8" -> "0x555555567708";
  "0x555555567708" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567338" -> "0x555555567968";
  "0x555555567968" [label="!cc\nType: Decimal Literal Node\nLine: 2"];
  "0x555555567338" -> "0x555555567a28";
  "0x555555567a28" [label="!d\nType: Int Variable Declaration Node\nLine: 3"];
  "0x555555567338" -> "0x555555567a68";
  "0x555555567a68" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x555555567a68" -> "0x555555567ae8";
  "0x555555567ae8" [label="expression\nType: Expression Node\nLine: 4"];
  "0x555555567ae8" -> "0x555555567b68";
  "0x555555567b68" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x555555567338" -> "0x555555569488";
  "0x555555569488" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x555555569488" -> "0x5555555694e8";
  "0x5555555694e8" [label="expression\nType: Expression Node\nLine: 5"];
  "0x5555555694e8" -> "0x555555569568";
  "0x555555569568" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x555555567338" -> "0x5555555695c8";
  "0x5555555695c8" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x5555555695c8" -> "0x555555567aa8";
  "0x555555567aa8" [label="expression\nType: Expression Node\nLine: 6"];
  "0x555555567aa8" -> "0x5555555696b8";
  "0x5555555696b8" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x555555567338" -> "0x555555569738";
  "0x555555569738" [label="if\nType: IF Node\nLine: 7"];
  "0x555555569738" -> "0x555555569798";
  "0x555555569798" [label="expression\nType: Expression Node\nLine: 7"];
  "0x555555569798" -> "0x555555569818";
  "0x555555569818" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555569798" -> "0x555555569898";
  "0x555555569898" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555569738" -> "0x5555555698f8";
  "0x5555555698f8" [label="if_inline_block\nType: IF Inline Execution Code Node\nLine: 8"];
  "0x5555555698f8" -> "0x555555569958";
  "0x555555569958" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x555555569958" -> "0x5555555699d8";
  "0x5555555699d8" [label="expression\nType: Expression Node\nLine: 8"];
  "0x5555555699d8" -> "0x555555569a58";
  "0x555555569a58" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x555555569958" -> "0x555555569ad8";
  "0x555555569ad8" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569ad8" -> "0x555555569b38";
  "0x555555569b38" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555569738" -> "0x555555569bb8";
  "0x555555569bb8" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x555555569bb8" -> "0x555555569c48";
  "0x555555569c48" [label="expression\nType: Expression Node\nLine: 9"];
  "0x555555569c48" -> "0x555555569ca8";
  "0x555555569ca8" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x555555569bb8" -> "0x555555569d28";
  "0x555555569d28" [label="expression\nType: Expression Node\nLine: 9"];
  "0x555555569d28" -> "0x555555569d88";
  "0x555555569d88" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x555555567338" -> "0x555555569e08";
  "0x555555569e08" [label="for\nType: FOR Node\nLine: 10"];
  "0x555555569e08" -> "0x555555569ec8";
  "0x555555569ec8" [label="FOR Expression\nType: FOR Statement Node\nLine: 10"];
  "0x555555569ec8" -> "0x555555569f48";
  "0x555555569f48" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 10"];
  "0x555555569f48" -> "0x555555569fd8";
  "0x555555569fd8" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x555555569fd8" -> "0x55555556a058";
  "0x55555556a058" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a058" -> "0x55555556a0d8";
  "0x55555556a0d8" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x555555569ec8" -> "0x55555556a158";
  "0x55555556a158" [label="FOR condition\nType: FOR Statement Node\nLine: 10"];
  "0x555555569ec8" -> "0x55555556a2f8";
  "0x55555556a2f8" [label="FOR control\nType: FOR Statement Control Node\nLine: 10"];
  "0x555555569e08" -> "0x55555556a5a8";
  "0x55555556a5a8" [label="block\nType: Block Node\nLine: 10"];
  "0x55555556a5a8" -> "0x55555556a5e8";
  "0x55555556a5e8" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x55555556a5e8" -> "0x55555556a668";
  "0x55555556a668" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556a668" -> "0x55555556a6e8";
  "0x55555556a6e8" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x55555556a5e8" -> "0x55555556a768";
  "0x55555556a768" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556a768" -> "0x55555556a7c8";
  "0x55555556a7c8" [label="!d\nType: Variable Reference Node\nLine: 11"];
  "0x555555567338" -> "0x55555556a1b8";
  "0x55555556a1b8" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a1b8" -> "0x55555556a218";
  "0x55555556a218" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a1b8" -> "0x55555556a298";
  "0x55555556a298" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x555555567338" -> "0x55555556a388";
  "0x55555556a388" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a388" -> "0x55555556a438";
  "0x55555556a438" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a388" -> "0x55555556a4b8";
  "0x55555556a4b8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a388" -> "0x55555556a518";
  "0x55555556a518" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x555555567338" -> "0x55555556b888";
  "0x55555556b888" [label="__declaracao\nType: Function Declaration Node\nLine: 14"];
  "0x55555556b888" -> "0x55555556b8e8";
  "0x55555556b8e8" [label="block\nType: Block Node\nLine: 14"];
  "0x55555556b8e8" -> "0x55555556b9b8";
  "0x55555556b9b8" [label="!gg\nType: Int Variable Declaration Node\nLine: 15"];
  "0x55555556b9b8" -> "0x55555556bb78";
  "0x55555556bb78" [label="=\nType: Assignment Node\nLine: 15"];
  "0x55555556bb78" -> "0x55555556bbd8";
  "0x55555556bbd8" [label="expression\nType: Expression Node\nLine: 15"];
  "0x55555556bbd8" -> "0x55555556bc38";
  "0x55555556bc38" [label="8\nType: Int Literal Node\nLine: 15"];
  "0x55555556b8e8" -> "0x55555556bd28";
  "0x55555556bd28" [label="!hg\nType: Int Variable Declaration Node\nLine: 16"];
  "0x55555556bd28" -> "0x55555556bec8";
  "0x55555556bec8" [label="=\nType: Assignment Node\nLine: 16"];
  "0x55555556bec8" -> "0x55555556bf28";
  "0x55555556bf28" [label="expression\nType: Expression Node\nLine: 16"];
  "0x55555556bf28" -> "0x55555556bf88";
  "0x55555556bf88" [label="9\nType: Int Literal Node\nLine: 16"];
  "0x55555556b8e8" -> "0x55555556c048";
  "0x55555556c048" [label="return\nType: Function Call Node\nLine: 18"];
  "0x55555556c048" -> "0x55555556c0b8";
  "0x55555556c0b8" [label="expression\nType: Expression Node\nLine: 18"];
  "0x55555556c0b8" -> "0x55555556c118";
  "0x55555556c118" [label="!gg\nType: Variable Reference Node\nLine: 18"];
  "0x55555556c0b8" -> "0x55555556c198";
  "0x55555556c198" [label="8\nType: Int Literal Node\nLine: 18"];
  "0x55555556b8e8" -> "0x55555556c1f8";
  "0x55555556c1f8" [label="for\nType: FOR Node\nLine: 20"];
  "0x55555556c1f8" -> "0x55555556c258";
  "0x55555556c258" [label="FOR Expression\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c258" -> "0x55555556c2d8";
  "0x55555556c2d8" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 20"];
  "0x55555556c2d8" -> "0x55555556c3b8";
  "0x55555556c3b8" [label="!i\nType: Int Variable Declaration Node\nLine: 20"];
  "0x55555556c3b8" -> "0x55555556c578";
  "0x55555556c578" [label="=\nType: Assignment Node\nLine: 20"];
  "0x55555556c578" -> "0x55555556c5d8";
  "0x55555556c5d8" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c5d8" -> "0x55555556c638";
  "0x55555556c638" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556c258" -> "0x55555556c6f8";
  "0x55555556c6f8" [label="FOR condition\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c258" -> "0x55555556c8b8";
  "0x55555556c8b8" [label="FOR control\nType: FOR Statement Control Node\nLine: 20"];
  "0x55555556c1f8" -> "0x55555556caf8";
  "0x55555556caf8" [label="block\nType: Block Node\nLine: 20"];
  "0x55555556caf8" -> "0x55555556cb58";
  "0x55555556cb58" [label="!lpa\nType: Int Variable Declaration Node\nLine: 21"];
  "0x55555556cb58" -> "0x55555556cd18";
  "0x55555556cd18" [label="=\nType: Assignment Node\nLine: 21"];
  "0x55555556cd18" -> "0x55555556cd78";
  "0x55555556cd78" [label="expression\nType: Expression Node\nLine: 21"];
  "0x55555556cd78" -> "0x55555556cdd8";
  "0x55555556cdd8" [label="0\nType: Int Literal Node\nLine: 21"];
  "0x55555556caf8" -> "0x55555556ce98";
  "0x55555556ce98" [label="!lpa\nType: Assignment Node\nLine: 23"];
  "0x55555556ce98" -> "0x55555556ced8";
  "0x55555556ced8" [label="expression\nType: Expression Node\nLine: 23"];
  "0x55555556ced8" -> "0x55555556cf58";
  "0x55555556cf58" [label="!lpa\nType: Variable Reference Node\nLine: 23"];
  "0x55555556ced8" -> "0x55555556cfd8";
  "0x55555556cfd8" [label="1\nType: Int Literal Node\nLine: 23"];
  "0x55555556b8e8" -> "0x55555556c738";
  "0x55555556c738" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c738" -> "0x55555556c7d8";
  "0x55555556c7d8" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c738" -> "0x55555556c858";
  "0x55555556c858" [label="20\nType: Int Literal Node\nLine: 20"];
  "0x55555556b8e8" -> "0x55555556c948";
  "0x55555556c948" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c948" -> "0x55555556c988";
  "0x55555556c988" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c948" -> "0x55555556ca08";
  "0x55555556ca08" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c948" -> "0x55555556ca68";
  "0x55555556ca68" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556b8e8" -> "0x55555556d038";
  "0x55555556d038" [label="for\nType: FOR Node\nLine: 26"];
  "0x55555556d038" -> "0x55555556c798";
  "0x55555556c798" [label="FOR Expression\nType: FOR Statement Node\nLine: 26"];
  "0x55555556c798" -> "0x55555556d128";
  "0x55555556d128" [label="FOR empty initialization\nType: FOR Statement Empty Initialization Node\nLine: 26"];
  "0x55555556c798" -> "0x55555556d1b8";
  "0x55555556d1b8" [label="FOR empty condition\nType: FOR Statement Empty Condition Node\nLine: 26"];
  "0x55555556c798" -> "0x55555556d228";
  "0x55555556d228" [label="FOR empty control\nType: FOR Statement Empty Control Node\nLine: 26"];
  "0x55555556d038" -> "0x55555556d2c8";
  "0x55555556d2c8" [label="block\nType: Block Node\nLine: 26"];
  "0x555555567338" -> "0x55555556a878";
  "0x55555556a878" [label="if\nType: IF Node\nLine: 30"];
  "0x55555556a878" -> "0x55555556a938";
  "0x55555556a938" [label="expression\nType: Expression Node\nLine: 30"];
  "0x55555556a938" -> "0x55555556a978";
  "0x55555556a978" [label="!a\nType: Variable Reference Node\nLine: 30"];
  "0x55555556a938" -> "0x55555556a9d8";
  "0x55555556a9d8" [label="7\nType: Int Literal Node\nLine: 30"];
  "0x55555556a878" -> "0x55555556aa38";
  "0x55555556aa38" [label="block\nType: IF Block Node\nLine: 30"];
  "0x55555556aa38" -> "0x55555556aa98";
  "0x55555556aa98" [label="escreva\nType: Function Call Node\nLine: 31"];
  "0x55555556aa98" -> "0x55555556ab18";
  "0x55555556ab18" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556ab18" -> "0x55555556ab98";
  "0x55555556ab98" [label="A é menor do que 7: \nType: Text Literal Node\nLine: 31"];
  "0x55555556aa98" -> "0x55555556abf8";
  "0x55555556abf8" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556abf8" -> "0x55555556ac58";
  "0x55555556ac58" [label="!a\nType: Variable Reference Node\nLine: 31"];
  "0x55555556aa38" -> "0x55555556acd8";
  "0x55555556acd8" [label="!a\nType: Assignment Node\nLine: 32"];
  "0x55555556acd8" -> "0x55555556ad38";
  "0x55555556ad38" [label="expression\nType: Expression Node\nLine: 32"];
  "0x55555556ad38" -> "0x55555556adb8";
  "0x55555556adb8" [label="7\nType: Int Literal Node\nLine: 32"];
}
