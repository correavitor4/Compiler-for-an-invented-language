digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555565608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555565608" -> "0x5555555674e8";
  "0x5555555674e8" [label="block\nType: Block Node\nLine: 0"];
  "0x5555555674e8" -> "0x555555567598";
  "0x555555567598" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567598" -> "0x555555567978";
  "0x555555567978" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567978" -> "0x5555555679d8";
  "0x5555555679d8" [label="expression\nType: Expression Node\nLine: 1"];
  "0x5555555679d8" -> "0x555555567a38";
  "0x555555567a38" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x5555555674e8" -> "0x555555567648";
  "0x555555567648" [label="!b2\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567648" -> "0x5555555677f8";
  "0x5555555677f8" [label="=\nType: Assignment Node\nLine: 1"];
  "0x5555555677f8" -> "0x555555567858";
  "0x555555567858" [label="expression\nType: Expression Node\nLine: 1"];
  "0x555555567858" -> "0x5555555678b8";
  "0x5555555678b8" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x5555555674e8" -> "0x555555567b18";
  "0x555555567b18" [label="!cc\nType: Decimal Literal Node\nLine: 2"];
  "0x5555555674e8" -> "0x555555569608";
  "0x555555569608" [label="!d\nType: Int Variable Declaration Node\nLine: 3"];
  "0x5555555674e8" -> "0x555555569648";
  "0x555555569648" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x555555569648" -> "0x5555555696c8";
  "0x5555555696c8" [label="expression\nType: Expression Node\nLine: 4"];
  "0x5555555696c8" -> "0x555555569748";
  "0x555555569748" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x5555555674e8" -> "0x5555555697c8";
  "0x5555555697c8" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x5555555697c8" -> "0x555555569828";
  "0x555555569828" [label="expression\nType: Expression Node\nLine: 5"];
  "0x555555569828" -> "0x5555555698a8";
  "0x5555555698a8" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x5555555674e8" -> "0x555555569908";
  "0x555555569908" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x555555569908" -> "0x555555569688";
  "0x555555569688" [label="expression\nType: Expression Node\nLine: 6"];
  "0x555555569688" -> "0x5555555699f8";
  "0x5555555699f8" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x5555555674e8" -> "0x555555569a78";
  "0x555555569a78" [label="if\nType: IF Node\nLine: 7"];
  "0x555555569a78" -> "0x555555569ad8";
  "0x555555569ad8" [label="expression\nType: Expression Node\nLine: 7"];
  "0x555555569ad8" -> "0x555555569b58";
  "0x555555569b58" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555569ad8" -> "0x555555569bd8";
  "0x555555569bd8" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555569a78" -> "0x555555569c38";
  "0x555555569c38" [label="if_inline_block\nType: IF Inline Execution Code Node\nLine: 8"];
  "0x555555569c38" -> "0x555555569c98";
  "0x555555569c98" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x555555569c98" -> "0x555555569d18";
  "0x555555569d18" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569d18" -> "0x555555569d98";
  "0x555555569d98" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x555555569c98" -> "0x555555569e18";
  "0x555555569e18" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569e18" -> "0x555555569e78";
  "0x555555569e78" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555569a78" -> "0x555555569ef8";
  "0x555555569ef8" [label="else_inline_block\nType: ELSE Inline Execution Code Node\nLine: 9"];
  "0x555555569ef8" -> "0x555555569f98";
  "0x555555569f98" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x555555569f98" -> "0x555555569ff8";
  "0x555555569ff8" [label="expression\nType: Expression Node\nLine: 9"];
  "0x555555569ff8" -> "0x55555556a078";
  "0x55555556a078" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x555555569f98" -> "0x55555556a0f8";
  "0x55555556a0f8" [label="expression\nType: Expression Node\nLine: 9"];
  "0x55555556a0f8" -> "0x55555556a158";
  "0x55555556a158" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x5555555674e8" -> "0x55555556a1d8";
  "0x55555556a1d8" [label="for\nType: FOR Node\nLine: 10"];
  "0x55555556a1d8" -> "0x55555556a298";
  "0x55555556a298" [label="FOR Expression\nType: FOR Statement Node\nLine: 10"];
  "0x55555556a298" -> "0x55555556a318";
  "0x55555556a318" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 10"];
  "0x55555556a318" -> "0x55555556a3a8";
  "0x55555556a3a8" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x55555556a3a8" -> "0x55555556a428";
  "0x55555556a428" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a428" -> "0x55555556a4a8";
  "0x55555556a4a8" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x55555556a298" -> "0x55555556a528";
  "0x55555556a528" [label="FOR condition\nType: FOR Statement Node\nLine: 10"];
  "0x55555556a298" -> "0x55555556a6c8";
  "0x55555556a6c8" [label="FOR control\nType: FOR Statement Control Node\nLine: 10"];
  "0x55555556a1d8" -> "0x55555556a978";
  "0x55555556a978" [label="block\nType: Block Node\nLine: 10"];
  "0x55555556a978" -> "0x55555556a9b8";
  "0x55555556a9b8" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x55555556a9b8" -> "0x55555556aa38";
  "0x55555556aa38" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556aa38" -> "0x55555556aab8";
  "0x55555556aab8" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x55555556a9b8" -> "0x55555556ab38";
  "0x55555556ab38" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556ab38" -> "0x55555556ab98";
  "0x55555556ab98" [label="!d\nType: Variable Reference Node\nLine: 11"];
  "0x5555555674e8" -> "0x55555556a588";
  "0x55555556a588" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a588" -> "0x55555556a5e8";
  "0x55555556a5e8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a588" -> "0x55555556a668";
  "0x55555556a668" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x5555555674e8" -> "0x55555556a758";
  "0x55555556a758" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a758" -> "0x55555556a808";
  "0x55555556a808" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a758" -> "0x55555556a888";
  "0x55555556a888" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a758" -> "0x55555556a8e8";
  "0x55555556a8e8" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x5555555674e8" -> "0x55555556bc58";
  "0x55555556bc58" [label="__declaracao\nType: Function Declaration Node\nLine: 14"];
  "0x55555556bc58" -> "0x55555556bcb8";
  "0x55555556bcb8" [label="block\nType: Block Node\nLine: 14"];
  "0x55555556bcb8" -> "0x55555556bd88";
  "0x55555556bd88" [label="!gg\nType: Int Variable Declaration Node\nLine: 15"];
  "0x55555556bd88" -> "0x55555556bf48";
  "0x55555556bf48" [label="=\nType: Assignment Node\nLine: 15"];
  "0x55555556bf48" -> "0x55555556bfa8";
  "0x55555556bfa8" [label="expression\nType: Expression Node\nLine: 15"];
  "0x55555556bfa8" -> "0x55555556c008";
  "0x55555556c008" [label="8\nType: Int Literal Node\nLine: 15"];
  "0x55555556bcb8" -> "0x55555556c0f8";
  "0x55555556c0f8" [label="!hg\nType: Int Variable Declaration Node\nLine: 16"];
  "0x55555556c0f8" -> "0x55555556c298";
  "0x55555556c298" [label="=\nType: Assignment Node\nLine: 16"];
  "0x55555556c298" -> "0x55555556c2f8";
  "0x55555556c2f8" [label="expression\nType: Expression Node\nLine: 16"];
  "0x55555556c2f8" -> "0x55555556c358";
  "0x55555556c358" [label="9\nType: Int Literal Node\nLine: 16"];
  "0x55555556bcb8" -> "0x55555556c418";
  "0x55555556c418" [label="return\nType: Function Call Node\nLine: 18"];
  "0x55555556c418" -> "0x55555556c488";
  "0x55555556c488" [label="expression\nType: Expression Node\nLine: 18"];
  "0x55555556c488" -> "0x55555556c4e8";
  "0x55555556c4e8" [label="!gg\nType: Variable Reference Node\nLine: 18"];
  "0x55555556c488" -> "0x55555556c568";
  "0x55555556c568" [label="8\nType: Int Literal Node\nLine: 18"];
  "0x55555556bcb8" -> "0x55555556c5c8";
  "0x55555556c5c8" [label="for\nType: FOR Node\nLine: 20"];
  "0x55555556c5c8" -> "0x55555556c628";
  "0x55555556c628" [label="FOR Expression\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c628" -> "0x55555556c6a8";
  "0x55555556c6a8" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 20"];
  "0x55555556c6a8" -> "0x55555556c788";
  "0x55555556c788" [label="!i\nType: Int Variable Declaration Node\nLine: 20"];
  "0x55555556c788" -> "0x55555556c948";
  "0x55555556c948" [label="=\nType: Assignment Node\nLine: 20"];
  "0x55555556c948" -> "0x55555556c9a8";
  "0x55555556c9a8" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c9a8" -> "0x55555556ca08";
  "0x55555556ca08" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556c628" -> "0x55555556cac8";
  "0x55555556cac8" [label="FOR condition\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c628" -> "0x55555556cc88";
  "0x55555556cc88" [label="FOR control\nType: FOR Statement Control Node\nLine: 20"];
  "0x55555556c5c8" -> "0x55555556cec8";
  "0x55555556cec8" [label="block\nType: Block Node\nLine: 20"];
  "0x55555556cec8" -> "0x55555556cf28";
  "0x55555556cf28" [label="!lpa\nType: Int Variable Declaration Node\nLine: 21"];
  "0x55555556cf28" -> "0x55555556d0e8";
  "0x55555556d0e8" [label="=\nType: Assignment Node\nLine: 21"];
  "0x55555556d0e8" -> "0x55555556d148";
  "0x55555556d148" [label="expression\nType: Expression Node\nLine: 21"];
  "0x55555556d148" -> "0x55555556d1a8";
  "0x55555556d1a8" [label="0\nType: Int Literal Node\nLine: 21"];
  "0x55555556cec8" -> "0x55555556d268";
  "0x55555556d268" [label="!lpa\nType: Assignment Node\nLine: 23"];
  "0x55555556d268" -> "0x55555556d2a8";
  "0x55555556d2a8" [label="expression\nType: Expression Node\nLine: 23"];
  "0x55555556d2a8" -> "0x55555556d328";
  "0x55555556d328" [label="!lpa\nType: Variable Reference Node\nLine: 23"];
  "0x55555556d2a8" -> "0x55555556d3a8";
  "0x55555556d3a8" [label="1\nType: Int Literal Node\nLine: 23"];
  "0x55555556bcb8" -> "0x55555556cb08";
  "0x55555556cb08" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556cb08" -> "0x55555556cba8";
  "0x55555556cba8" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cb08" -> "0x55555556cc28";
  "0x55555556cc28" [label="20\nType: Int Literal Node\nLine: 20"];
  "0x55555556bcb8" -> "0x55555556cd18";
  "0x55555556cd18" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556cd18" -> "0x55555556cd58";
  "0x55555556cd58" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cd18" -> "0x55555556cdd8";
  "0x55555556cdd8" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cd18" -> "0x55555556ce38";
  "0x55555556ce38" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556bcb8" -> "0x55555556d408";
  "0x55555556d408" [label="for\nType: FOR Node\nLine: 26"];
  "0x55555556d408" -> "0x55555556cb68";
  "0x55555556cb68" [label="FOR Expression\nType: FOR Statement Node\nLine: 26"];
  "0x55555556cb68" -> "0x55555556d4f8";
  "0x55555556d4f8" [label="FOR empty initialization\nType: FOR Statement Empty Initialization Node\nLine: 26"];
  "0x55555556cb68" -> "0x55555556d588";
  "0x55555556d588" [label="FOR empty condition\nType: FOR Statement Empty Condition Node\nLine: 26"];
  "0x55555556cb68" -> "0x55555556d5f8";
  "0x55555556d5f8" [label="FOR empty control\nType: FOR Statement Empty Control Node\nLine: 26"];
  "0x55555556d408" -> "0x55555556d698";
  "0x55555556d698" [label="block\nType: Block Node\nLine: 26"];
  "0x5555555674e8" -> "0x55555556ac48";
  "0x55555556ac48" [label="if\nType: IF Node\nLine: 30"];
  "0x55555556ac48" -> "0x55555556ad08";
  "0x55555556ad08" [label="expression\nType: Expression Node\nLine: 30"];
  "0x55555556ad08" -> "0x55555556ad48";
  "0x55555556ad48" [label="!a\nType: Variable Reference Node\nLine: 30"];
  "0x55555556ad08" -> "0x55555556ada8";
  "0x55555556ada8" [label="7\nType: Int Literal Node\nLine: 30"];
  "0x55555556ac48" -> "0x55555556ae08";
  "0x55555556ae08" [label="if block\nType: IF Block Node\nLine: 30"];
  "0x55555556ae08" -> "0x55555556ae68";
  "0x55555556ae68" [label="escreva\nType: Function Call Node\nLine: 31"];
  "0x55555556ae68" -> "0x55555556aee8";
  "0x55555556aee8" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556aee8" -> "0x55555556af68";
  "0x55555556af68" [label="A é menor do que 7: \nType: Text Literal Node\nLine: 31"];
  "0x55555556ae68" -> "0x55555556afc8";
  "0x55555556afc8" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556afc8" -> "0x55555556b028";
  "0x55555556b028" [label="!a\nType: Variable Reference Node\nLine: 31"];
  "0x55555556ae08" -> "0x55555556b0a8";
  "0x55555556b0a8" [label="!a\nType: Assignment Node\nLine: 32"];
  "0x55555556b0a8" -> "0x55555556b108";
  "0x55555556b108" [label="expression\nType: Expression Node\nLine: 32"];
  "0x55555556b108" -> "0x55555556b188";
  "0x55555556b188" [label="7\nType: Int Literal Node\nLine: 32"];
  "0x55555556ac48" -> "0x55555556b208";
  "0x55555556b208" [label="else code block\nType: ELSE Execution Code Block Node\nLine: 34"];
  "0x55555556b208" -> "0x55555556b298";
  "0x55555556b298" [label="escreva\nType: Function Call Node\nLine: 35"];
  "0x55555556b298" -> "0x55555556b2f8";
  "0x55555556b2f8" [label="expression\nType: Expression Node\nLine: 35"];
  "0x55555556b2f8" -> "0x55555556b378";
  "0x55555556b378" [label="A é maior do que 7: \nType: Text Literal Node\nLine: 35"];
  "0x55555556b298" -> "0x55555556b3d8";
  "0x55555556b3d8" [label="expression\nType: Expression Node\nLine: 35"];
  "0x55555556b3d8" -> "0x55555556b438";
  "0x55555556b438" [label="!a\nType: Variable Reference Node\nLine: 35"];
}
