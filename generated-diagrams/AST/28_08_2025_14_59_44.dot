digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555565608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555565608" -> "0x555555567608";
  "0x555555567608" [label="main\nType: Function Declaration Node\nLine: 0"];
  "0x555555567608" -> "0x555555567668";
  "0x555555567668" [label="block\nType: Block Node\nLine: 0"];
  "0x555555567668" -> "0x555555567738";
  "0x555555567738" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567738" -> "0x555555567b18";
  "0x555555567b18" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567b18" -> "0x555555567b78";
  "0x555555567b78" [label="expression\nType: Expression Node\nLine: 1"];
  "0x555555567b78" -> "0x555555569728";
  "0x555555569728" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567668" -> "0x5555555677e8";
  "0x5555555677e8" [label="!b2\nType: Int Variable Declaration Node\nLine: 1"];
  "0x5555555677e8" -> "0x555555567998";
  "0x555555567998" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567998" -> "0x5555555679f8";
  "0x5555555679f8" [label="expression\nType: Expression Node\nLine: 1"];
  "0x5555555679f8" -> "0x555555567a58";
  "0x555555567a58" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567668" -> "0x555555569808";
  "0x555555569808" [label="!cc\nType: Decimal Variable Declaration Node\nLine: 2"];
  "0x555555567668" -> "0x5555555698c8";
  "0x5555555698c8" [label="!d\nType: Int Variable Declaration Node\nLine: 3"];
  "0x555555567668" -> "0x555555569908";
  "0x555555569908" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x555555569908" -> "0x555555569988";
  "0x555555569988" [label="expression\nType: Expression Node\nLine: 4"];
  "0x555555569988" -> "0x555555569a08";
  "0x555555569a08" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x555555567668" -> "0x555555569a88";
  "0x555555569a88" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x555555569a88" -> "0x555555569ae8";
  "0x555555569ae8" [label="expression\nType: Expression Node\nLine: 5"];
  "0x555555569ae8" -> "0x555555569b68";
  "0x555555569b68" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x555555567668" -> "0x555555569bc8";
  "0x555555569bc8" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x555555569bc8" -> "0x555555569948";
  "0x555555569948" [label="expression\nType: Expression Node\nLine: 6"];
  "0x555555569948" -> "0x555555569cb8";
  "0x555555569cb8" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x555555567668" -> "0x555555569d38";
  "0x555555569d38" [label="if\nType: IF Node\nLine: 7"];
  "0x555555569d38" -> "0x555555569d98";
  "0x555555569d98" [label="if condition\nType: IF Statement Expression Node\nLine: 7"];
  "0x555555569d98" -> "0x555555569e18";
  "0x555555569e18" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555569d98" -> "0x555555569e98";
  "0x555555569e98" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555569d38" -> "0x555555569ef8";
  "0x555555569ef8" [label="if_inline_block\nType: IF Inline Execution Code Node\nLine: 8"];
  "0x555555569ef8" -> "0x555555569f58";
  "0x555555569f58" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x555555569f58" -> "0x555555569fd8";
  "0x555555569fd8" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569fd8" -> "0x55555556a058";
  "0x55555556a058" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x555555569f58" -> "0x55555556a0d8";
  "0x55555556a0d8" [label="expression\nType: Expression Node\nLine: 8"];
  "0x55555556a0d8" -> "0x55555556a138";
  "0x55555556a138" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555569d38" -> "0x55555556a1b8";
  "0x55555556a1b8" [label="else_inline_block\nType: ELSE Inline Execution Code Node\nLine: 9"];
  "0x55555556a1b8" -> "0x55555556a258";
  "0x55555556a258" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x55555556a258" -> "0x55555556a2b8";
  "0x55555556a2b8" [label="expression\nType: Expression Node\nLine: 9"];
  "0x55555556a2b8" -> "0x55555556a338";
  "0x55555556a338" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x55555556a258" -> "0x55555556a3b8";
  "0x55555556a3b8" [label="expression\nType: Expression Node\nLine: 9"];
  "0x55555556a3b8" -> "0x55555556a418";
  "0x55555556a418" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x555555567668" -> "0x55555556a498";
  "0x55555556a498" [label="for\nType: FOR Node\nLine: 10"];
  "0x55555556a498" -> "0x55555556a558";
  "0x55555556a558" [label="FOR Expression\nType: FOR Statement Node\nLine: 10"];
  "0x55555556a558" -> "0x55555556a5d8";
  "0x55555556a5d8" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 10"];
  "0x55555556a5d8" -> "0x55555556a668";
  "0x55555556a668" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x55555556a668" -> "0x55555556a6e8";
  "0x55555556a6e8" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a6e8" -> "0x55555556a768";
  "0x55555556a768" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x55555556a558" -> "0x55555556a7e8";
  "0x55555556a7e8" [label="FOR condition\nType: FOR Statement Node\nLine: 10"];
  "0x55555556a558" -> "0x55555556a988";
  "0x55555556a988" [label="FOR control\nType: FOR Statement Control Node\nLine: 10"];
  "0x55555556a498" -> "0x55555556ac38";
  "0x55555556ac38" [label="block\nType: Block Node\nLine: 10"];
  "0x55555556ac38" -> "0x55555556ac78";
  "0x55555556ac78" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x55555556ac78" -> "0x55555556acf8";
  "0x55555556acf8" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556acf8" -> "0x55555556ad78";
  "0x55555556ad78" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x55555556ac78" -> "0x55555556adf8";
  "0x55555556adf8" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556adf8" -> "0x55555556ae58";
  "0x55555556ae58" [label="!d\nType: Variable Reference Node\nLine: 11"];
  "0x555555567668" -> "0x55555556a848";
  "0x55555556a848" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a848" -> "0x55555556a8a8";
  "0x55555556a8a8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a848" -> "0x55555556a928";
  "0x55555556a928" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x555555567668" -> "0x55555556aa18";
  "0x55555556aa18" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556aa18" -> "0x55555556aac8";
  "0x55555556aac8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556aa18" -> "0x55555556ab48";
  "0x55555556ab48" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556aa18" -> "0x55555556aba8";
  "0x55555556aba8" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x555555567668" -> "0x55555556bf18";
  "0x55555556bf18" [label="__declaracao\nType: Function Declaration Node\nLine: 14"];
  "0x55555556bf18" -> "0x55555556bf78";
  "0x55555556bf78" [label="block\nType: Block Node\nLine: 14"];
  "0x55555556bf78" -> "0x55555556c048";
  "0x55555556c048" [label="!gg\nType: Int Variable Declaration Node\nLine: 15"];
  "0x55555556c048" -> "0x55555556c208";
  "0x55555556c208" [label="=\nType: Assignment Node\nLine: 15"];
  "0x55555556c208" -> "0x55555556c268";
  "0x55555556c268" [label="expression\nType: Expression Node\nLine: 15"];
  "0x55555556c268" -> "0x55555556c2c8";
  "0x55555556c2c8" [label="8\nType: Int Literal Node\nLine: 15"];
  "0x55555556bf78" -> "0x55555556c3b8";
  "0x55555556c3b8" [label="!hg\nType: Int Variable Declaration Node\nLine: 16"];
  "0x55555556c3b8" -> "0x55555556c558";
  "0x55555556c558" [label="=\nType: Assignment Node\nLine: 16"];
  "0x55555556c558" -> "0x55555556c5b8";
  "0x55555556c5b8" [label="expression\nType: Expression Node\nLine: 16"];
  "0x55555556c5b8" -> "0x55555556c618";
  "0x55555556c618" [label="9\nType: Int Literal Node\nLine: 16"];
  "0x55555556bf78" -> "0x55555556c6d8";
  "0x55555556c6d8" [label="return\nType: Function Call Node\nLine: 18"];
  "0x55555556c6d8" -> "0x55555556c748";
  "0x55555556c748" [label="expression\nType: Expression Node\nLine: 18"];
  "0x55555556c748" -> "0x55555556c7a8";
  "0x55555556c7a8" [label="!gg\nType: Variable Reference Node\nLine: 18"];
  "0x55555556c748" -> "0x55555556c828";
  "0x55555556c828" [label="8\nType: Int Literal Node\nLine: 18"];
  "0x55555556bf78" -> "0x55555556c888";
  "0x55555556c888" [label="for\nType: FOR Node\nLine: 20"];
  "0x55555556c888" -> "0x55555556c8e8";
  "0x55555556c8e8" [label="FOR Expression\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c8e8" -> "0x55555556c968";
  "0x55555556c968" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 20"];
  "0x55555556c968" -> "0x55555556ca48";
  "0x55555556ca48" [label="!i\nType: Int Variable Declaration Node\nLine: 20"];
  "0x55555556ca48" -> "0x55555556cc08";
  "0x55555556cc08" [label="=\nType: Assignment Node\nLine: 20"];
  "0x55555556cc08" -> "0x55555556cc68";
  "0x55555556cc68" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556cc68" -> "0x55555556ccc8";
  "0x55555556ccc8" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556c8e8" -> "0x55555556cd88";
  "0x55555556cd88" [label="FOR condition\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c8e8" -> "0x55555556cf48";
  "0x55555556cf48" [label="FOR control\nType: FOR Statement Control Node\nLine: 20"];
  "0x55555556c888" -> "0x55555556d188";
  "0x55555556d188" [label="block\nType: Block Node\nLine: 20"];
  "0x55555556d188" -> "0x55555556d1e8";
  "0x55555556d1e8" [label="!lpa\nType: Int Variable Declaration Node\nLine: 21"];
  "0x55555556d1e8" -> "0x55555556d3a8";
  "0x55555556d3a8" [label="=\nType: Assignment Node\nLine: 21"];
  "0x55555556d3a8" -> "0x55555556d408";
  "0x55555556d408" [label="expression\nType: Expression Node\nLine: 21"];
  "0x55555556d408" -> "0x55555556d468";
  "0x55555556d468" [label="0\nType: Int Literal Node\nLine: 21"];
  "0x55555556d188" -> "0x55555556d528";
  "0x55555556d528" [label="!lpa\nType: Assignment Node\nLine: 23"];
  "0x55555556d528" -> "0x55555556d568";
  "0x55555556d568" [label="expression\nType: Expression Node\nLine: 23"];
  "0x55555556d568" -> "0x55555556d5e8";
  "0x55555556d5e8" [label="!lpa\nType: Variable Reference Node\nLine: 23"];
  "0x55555556d568" -> "0x55555556d668";
  "0x55555556d668" [label="1\nType: Int Literal Node\nLine: 23"];
  "0x55555556bf78" -> "0x55555556cdc8";
  "0x55555556cdc8" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556cdc8" -> "0x55555556ce68";
  "0x55555556ce68" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cdc8" -> "0x55555556cee8";
  "0x55555556cee8" [label="20\nType: Int Literal Node\nLine: 20"];
  "0x55555556bf78" -> "0x55555556cfd8";
  "0x55555556cfd8" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556cfd8" -> "0x55555556d018";
  "0x55555556d018" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cfd8" -> "0x55555556d098";
  "0x55555556d098" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cfd8" -> "0x55555556d0f8";
  "0x55555556d0f8" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556bf78" -> "0x55555556d6c8";
  "0x55555556d6c8" [label="for\nType: FOR Node\nLine: 26"];
  "0x55555556d6c8" -> "0x55555556ce28";
  "0x55555556ce28" [label="FOR Expression\nType: FOR Statement Node\nLine: 26"];
  "0x55555556ce28" -> "0x55555556d7b8";
  "0x55555556d7b8" [label="FOR empty initialization\nType: FOR Statement Empty Initialization Node\nLine: 26"];
  "0x55555556ce28" -> "0x55555556d848";
  "0x55555556d848" [label="FOR empty condition\nType: FOR Statement Empty Condition Node\nLine: 26"];
  "0x55555556ce28" -> "0x55555556d8b8";
  "0x55555556d8b8" [label="FOR empty control\nType: FOR Statement Empty Control Node\nLine: 26"];
  "0x55555556d6c8" -> "0x55555556d958";
  "0x55555556d958" [label="block\nType: Block Node\nLine: 26"];
  "0x555555567668" -> "0x55555556af08";
  "0x55555556af08" [label="if\nType: IF Node\nLine: 30"];
  "0x55555556af08" -> "0x55555556afc8";
  "0x55555556afc8" [label="if condition\nType: IF Statement Expression Node\nLine: 30"];
  "0x55555556afc8" -> "0x55555556b008";
  "0x55555556b008" [label="!a\nType: Variable Reference Node\nLine: 30"];
  "0x55555556afc8" -> "0x55555556b068";
  "0x55555556b068" [label="7\nType: Int Literal Node\nLine: 30"];
  "0x55555556af08" -> "0x55555556b0c8";
  "0x55555556b0c8" [label="if block\nType: IF Block Node\nLine: 30"];
  "0x55555556b0c8" -> "0x55555556b128";
  "0x55555556b128" [label="escreva\nType: Function Call Node\nLine: 31"];
  "0x55555556b128" -> "0x55555556b1a8";
  "0x55555556b1a8" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556b1a8" -> "0x55555556b228";
  "0x55555556b228" [label="A é menor do que 7: \nType: Text Literal Node\nLine: 31"];
  "0x55555556b128" -> "0x55555556b288";
  "0x55555556b288" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556b288" -> "0x55555556b2e8";
  "0x55555556b2e8" [label="!a\nType: Variable Reference Node\nLine: 31"];
  "0x55555556b0c8" -> "0x55555556b368";
  "0x55555556b368" [label="!a\nType: Assignment Node\nLine: 32"];
  "0x55555556b368" -> "0x55555556b3c8";
  "0x55555556b3c8" [label="expression\nType: Expression Node\nLine: 32"];
  "0x55555556b3c8" -> "0x55555556b448";
  "0x55555556b448" [label="7\nType: Int Literal Node\nLine: 32"];
  "0x55555556af08" -> "0x55555556b4c8";
  "0x55555556b4c8" [label="else code block\nType: ELSE Execution Code Block Node\nLine: 34"];
  "0x55555556b4c8" -> "0x55555556b558";
  "0x55555556b558" [label="escreva\nType: Function Call Node\nLine: 35"];
  "0x55555556b558" -> "0x55555556b5b8";
  "0x55555556b5b8" [label="expression\nType: Expression Node\nLine: 35"];
  "0x55555556b5b8" -> "0x55555556b638";
  "0x55555556b638" [label="A é maior do que 7: \nType: Text Literal Node\nLine: 35"];
  "0x55555556b558" -> "0x55555556b698";
  "0x55555556b698" [label="expression\nType: Expression Node\nLine: 35"];
  "0x55555556b698" -> "0x55555556b6f8";
  "0x55555556b6f8" [label="!a\nType: Variable Reference Node\nLine: 35"];
  "0x555555567668" -> "0x55555556b798";
  "0x55555556b798" [label="!jc\nType: Decimal Variable Declaration Node\nLine: 38"];
  "0x55555556b798" -> "0x55555556b938";
  "0x55555556b938" [label="=\nType: Assignment Node\nLine: 38"];
  "0x55555556b938" -> "0x55555556b998";
  "0x55555556b998" [label="expression\nType: Expression Node\nLine: 38"];
  "0x55555556b998" -> "0x55555556b9f8";
  "0x55555556b9f8" [label="18.98654\nType: Decimal Literal Node\nLine: 38"];
}
