digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555565608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555565608" -> "0x5555555674e8";
  "0x5555555674e8" [label="main\nType: Function Declaration Node\nLine: 0"];
  "0x5555555674e8" -> "0x555555567548";
  "0x555555567548" [label="block\nType: Block Node\nLine: 0"];
  "0x555555567548" -> "0x555555567618";
  "0x555555567618" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567618" -> "0x5555555679f8";
  "0x5555555679f8" [label="=\nType: Assignment Node\nLine: 1"];
  "0x5555555679f8" -> "0x555555567a58";
  "0x555555567a58" [label="expression\nType: Expression Node\nLine: 1"];
  "0x555555567a58" -> "0x555555567ab8";
  "0x555555567ab8" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567548" -> "0x5555555676c8";
  "0x5555555676c8" [label="!b2\nType: Int Variable Declaration Node\nLine: 1"];
  "0x5555555676c8" -> "0x555555567878";
  "0x555555567878" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567878" -> "0x5555555678d8";
  "0x5555555678d8" [label="expression\nType: Expression Node\nLine: 1"];
  "0x5555555678d8" -> "0x555555567938";
  "0x555555567938" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567548" -> "0x555555567b98";
  "0x555555567b98" [label="!cc\nType: Decimal Literal Node\nLine: 2"];
  "0x555555567548" -> "0x555555569688";
  "0x555555569688" [label="!d\nType: Int Variable Declaration Node\nLine: 3"];
  "0x555555567548" -> "0x5555555696c8";
  "0x5555555696c8" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x5555555696c8" -> "0x555555569748";
  "0x555555569748" [label="expression\nType: Expression Node\nLine: 4"];
  "0x555555569748" -> "0x5555555697c8";
  "0x5555555697c8" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x555555567548" -> "0x555555569848";
  "0x555555569848" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x555555569848" -> "0x5555555698a8";
  "0x5555555698a8" [label="expression\nType: Expression Node\nLine: 5"];
  "0x5555555698a8" -> "0x555555569928";
  "0x555555569928" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x555555567548" -> "0x555555569988";
  "0x555555569988" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x555555569988" -> "0x555555569708";
  "0x555555569708" [label="expression\nType: Expression Node\nLine: 6"];
  "0x555555569708" -> "0x555555569a78";
  "0x555555569a78" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x555555567548" -> "0x555555569af8";
  "0x555555569af8" [label="if\nType: IF Node\nLine: 7"];
  "0x555555569af8" -> "0x555555569b58";
  "0x555555569b58" [label="if condition\nType: IF Statement Expression Node\nLine: 7"];
  "0x555555569b58" -> "0x555555569bd8";
  "0x555555569bd8" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555569b58" -> "0x555555569c58";
  "0x555555569c58" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555569af8" -> "0x555555569cb8";
  "0x555555569cb8" [label="if_inline_block\nType: IF Inline Execution Code Node\nLine: 8"];
  "0x555555569cb8" -> "0x555555569d18";
  "0x555555569d18" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x555555569d18" -> "0x555555569d98";
  "0x555555569d98" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569d98" -> "0x555555569e18";
  "0x555555569e18" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x555555569d18" -> "0x555555569e98";
  "0x555555569e98" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569e98" -> "0x555555569ef8";
  "0x555555569ef8" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555569af8" -> "0x555555569f78";
  "0x555555569f78" [label="else_inline_block\nType: ELSE Inline Execution Code Node\nLine: 9"];
  "0x555555569f78" -> "0x55555556a018";
  "0x55555556a018" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x55555556a018" -> "0x55555556a078";
  "0x55555556a078" [label="expression\nType: Expression Node\nLine: 9"];
  "0x55555556a078" -> "0x55555556a0f8";
  "0x55555556a0f8" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x55555556a018" -> "0x55555556a178";
  "0x55555556a178" [label="expression\nType: Expression Node\nLine: 9"];
  "0x55555556a178" -> "0x55555556a1d8";
  "0x55555556a1d8" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x555555567548" -> "0x55555556a258";
  "0x55555556a258" [label="for\nType: FOR Node\nLine: 10"];
  "0x55555556a258" -> "0x55555556a318";
  "0x55555556a318" [label="FOR Expression\nType: FOR Statement Node\nLine: 10"];
  "0x55555556a318" -> "0x55555556a398";
  "0x55555556a398" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 10"];
  "0x55555556a398" -> "0x55555556a428";
  "0x55555556a428" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x55555556a428" -> "0x55555556a4a8";
  "0x55555556a4a8" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a4a8" -> "0x55555556a528";
  "0x55555556a528" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x55555556a318" -> "0x55555556a5a8";
  "0x55555556a5a8" [label="FOR condition\nType: FOR Statement Node\nLine: 10"];
  "0x55555556a318" -> "0x55555556a748";
  "0x55555556a748" [label="FOR control\nType: FOR Statement Control Node\nLine: 10"];
  "0x55555556a258" -> "0x55555556a9f8";
  "0x55555556a9f8" [label="block\nType: Block Node\nLine: 10"];
  "0x55555556a9f8" -> "0x55555556aa38";
  "0x55555556aa38" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x55555556aa38" -> "0x55555556aab8";
  "0x55555556aab8" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556aab8" -> "0x55555556ab38";
  "0x55555556ab38" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x55555556aa38" -> "0x55555556abb8";
  "0x55555556abb8" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556abb8" -> "0x55555556ac18";
  "0x55555556ac18" [label="!d\nType: Variable Reference Node\nLine: 11"];
  "0x555555567548" -> "0x55555556a608";
  "0x55555556a608" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a608" -> "0x55555556a668";
  "0x55555556a668" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a608" -> "0x55555556a6e8";
  "0x55555556a6e8" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x555555567548" -> "0x55555556a7d8";
  "0x55555556a7d8" [label="expression\nType: Expression Node\nLine: 10"];
  "0x55555556a7d8" -> "0x55555556a888";
  "0x55555556a888" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a7d8" -> "0x55555556a908";
  "0x55555556a908" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x55555556a7d8" -> "0x55555556a968";
  "0x55555556a968" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x555555567548" -> "0x55555556bcd8";
  "0x55555556bcd8" [label="__declaracao\nType: Function Declaration Node\nLine: 14"];
  "0x55555556bcd8" -> "0x55555556bd38";
  "0x55555556bd38" [label="block\nType: Block Node\nLine: 14"];
  "0x55555556bd38" -> "0x55555556be08";
  "0x55555556be08" [label="!gg\nType: Int Variable Declaration Node\nLine: 15"];
  "0x55555556be08" -> "0x55555556bfc8";
  "0x55555556bfc8" [label="=\nType: Assignment Node\nLine: 15"];
  "0x55555556bfc8" -> "0x55555556c028";
  "0x55555556c028" [label="expression\nType: Expression Node\nLine: 15"];
  "0x55555556c028" -> "0x55555556c088";
  "0x55555556c088" [label="8\nType: Int Literal Node\nLine: 15"];
  "0x55555556bd38" -> "0x55555556c178";
  "0x55555556c178" [label="!hg\nType: Int Variable Declaration Node\nLine: 16"];
  "0x55555556c178" -> "0x55555556c318";
  "0x55555556c318" [label="=\nType: Assignment Node\nLine: 16"];
  "0x55555556c318" -> "0x55555556c378";
  "0x55555556c378" [label="expression\nType: Expression Node\nLine: 16"];
  "0x55555556c378" -> "0x55555556c3d8";
  "0x55555556c3d8" [label="9\nType: Int Literal Node\nLine: 16"];
  "0x55555556bd38" -> "0x55555556c498";
  "0x55555556c498" [label="return\nType: Function Call Node\nLine: 18"];
  "0x55555556c498" -> "0x55555556c508";
  "0x55555556c508" [label="expression\nType: Expression Node\nLine: 18"];
  "0x55555556c508" -> "0x55555556c568";
  "0x55555556c568" [label="!gg\nType: Variable Reference Node\nLine: 18"];
  "0x55555556c508" -> "0x55555556c5e8";
  "0x55555556c5e8" [label="8\nType: Int Literal Node\nLine: 18"];
  "0x55555556bd38" -> "0x55555556c648";
  "0x55555556c648" [label="for\nType: FOR Node\nLine: 20"];
  "0x55555556c648" -> "0x55555556c6a8";
  "0x55555556c6a8" [label="FOR Expression\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c6a8" -> "0x55555556c728";
  "0x55555556c728" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 20"];
  "0x55555556c728" -> "0x55555556c808";
  "0x55555556c808" [label="!i\nType: Int Variable Declaration Node\nLine: 20"];
  "0x55555556c808" -> "0x55555556c9c8";
  "0x55555556c9c8" [label="=\nType: Assignment Node\nLine: 20"];
  "0x55555556c9c8" -> "0x55555556ca28";
  "0x55555556ca28" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556ca28" -> "0x55555556ca88";
  "0x55555556ca88" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556c6a8" -> "0x55555556cb48";
  "0x55555556cb48" [label="FOR condition\nType: FOR Statement Node\nLine: 20"];
  "0x55555556c6a8" -> "0x55555556cd08";
  "0x55555556cd08" [label="FOR control\nType: FOR Statement Control Node\nLine: 20"];
  "0x55555556c648" -> "0x55555556cf48";
  "0x55555556cf48" [label="block\nType: Block Node\nLine: 20"];
  "0x55555556cf48" -> "0x55555556cfa8";
  "0x55555556cfa8" [label="!lpa\nType: Int Variable Declaration Node\nLine: 21"];
  "0x55555556cfa8" -> "0x55555556d168";
  "0x55555556d168" [label="=\nType: Assignment Node\nLine: 21"];
  "0x55555556d168" -> "0x55555556d1c8";
  "0x55555556d1c8" [label="expression\nType: Expression Node\nLine: 21"];
  "0x55555556d1c8" -> "0x55555556d228";
  "0x55555556d228" [label="0\nType: Int Literal Node\nLine: 21"];
  "0x55555556cf48" -> "0x55555556d2e8";
  "0x55555556d2e8" [label="!lpa\nType: Assignment Node\nLine: 23"];
  "0x55555556d2e8" -> "0x55555556d328";
  "0x55555556d328" [label="expression\nType: Expression Node\nLine: 23"];
  "0x55555556d328" -> "0x55555556d3a8";
  "0x55555556d3a8" [label="!lpa\nType: Variable Reference Node\nLine: 23"];
  "0x55555556d328" -> "0x55555556d428";
  "0x55555556d428" [label="1\nType: Int Literal Node\nLine: 23"];
  "0x55555556bd38" -> "0x55555556cb88";
  "0x55555556cb88" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556cb88" -> "0x55555556cc28";
  "0x55555556cc28" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cb88" -> "0x55555556cca8";
  "0x55555556cca8" [label="20\nType: Int Literal Node\nLine: 20"];
  "0x55555556bd38" -> "0x55555556cd98";
  "0x55555556cd98" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556cd98" -> "0x55555556cdd8";
  "0x55555556cdd8" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cd98" -> "0x55555556ce58";
  "0x55555556ce58" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556cd98" -> "0x55555556ceb8";
  "0x55555556ceb8" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556bd38" -> "0x55555556d488";
  "0x55555556d488" [label="for\nType: FOR Node\nLine: 26"];
  "0x55555556d488" -> "0x55555556cbe8";
  "0x55555556cbe8" [label="FOR Expression\nType: FOR Statement Node\nLine: 26"];
  "0x55555556cbe8" -> "0x55555556d578";
  "0x55555556d578" [label="FOR empty initialization\nType: FOR Statement Empty Initialization Node\nLine: 26"];
  "0x55555556cbe8" -> "0x55555556d608";
  "0x55555556d608" [label="FOR empty condition\nType: FOR Statement Empty Condition Node\nLine: 26"];
  "0x55555556cbe8" -> "0x55555556d678";
  "0x55555556d678" [label="FOR empty control\nType: FOR Statement Empty Control Node\nLine: 26"];
  "0x55555556d488" -> "0x55555556d718";
  "0x55555556d718" [label="block\nType: Block Node\nLine: 26"];
  "0x555555567548" -> "0x55555556acc8";
  "0x55555556acc8" [label="if\nType: IF Node\nLine: 30"];
  "0x55555556acc8" -> "0x55555556ad88";
  "0x55555556ad88" [label="if condition\nType: IF Statement Expression Node\nLine: 30"];
  "0x55555556ad88" -> "0x55555556adc8";
  "0x55555556adc8" [label="!a\nType: Variable Reference Node\nLine: 30"];
  "0x55555556ad88" -> "0x55555556ae28";
  "0x55555556ae28" [label="7\nType: Int Literal Node\nLine: 30"];
  "0x55555556acc8" -> "0x55555556ae88";
  "0x55555556ae88" [label="if block\nType: IF Block Node\nLine: 30"];
  "0x55555556ae88" -> "0x55555556aee8";
  "0x55555556aee8" [label="escreva\nType: Function Call Node\nLine: 31"];
  "0x55555556aee8" -> "0x55555556af68";
  "0x55555556af68" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556af68" -> "0x55555556afe8";
  "0x55555556afe8" [label="A é menor do que 7: \nType: Text Literal Node\nLine: 31"];
  "0x55555556aee8" -> "0x55555556b048";
  "0x55555556b048" [label="expression\nType: Expression Node\nLine: 31"];
  "0x55555556b048" -> "0x55555556b0a8";
  "0x55555556b0a8" [label="!a\nType: Variable Reference Node\nLine: 31"];
  "0x55555556ae88" -> "0x55555556b128";
  "0x55555556b128" [label="!a\nType: Assignment Node\nLine: 32"];
  "0x55555556b128" -> "0x55555556b188";
  "0x55555556b188" [label="expression\nType: Expression Node\nLine: 32"];
  "0x55555556b188" -> "0x55555556b208";
  "0x55555556b208" [label="7\nType: Int Literal Node\nLine: 32"];
  "0x55555556acc8" -> "0x55555556b288";
  "0x55555556b288" [label="else code block\nType: ELSE Execution Code Block Node\nLine: 34"];
  "0x55555556b288" -> "0x55555556b318";
  "0x55555556b318" [label="escreva\nType: Function Call Node\nLine: 35"];
  "0x55555556b318" -> "0x55555556b378";
  "0x55555556b378" [label="expression\nType: Expression Node\nLine: 35"];
  "0x55555556b378" -> "0x55555556b3f8";
  "0x55555556b3f8" [label="A é maior do que 7: \nType: Text Literal Node\nLine: 35"];
  "0x55555556b318" -> "0x55555556b458";
  "0x55555556b458" [label="expression\nType: Expression Node\nLine: 35"];
  "0x55555556b458" -> "0x55555556b4b8";
  "0x55555556b4b8" [label="!a\nType: Variable Reference Node\nLine: 35"];
}
