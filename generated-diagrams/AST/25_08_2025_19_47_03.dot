digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555565608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555565608" -> "0x555555566f48";
  "0x555555566f48" [label="block\nType: Block Node\nLine: 0"];
  "0x555555566f48" -> "0x555555566fd8";
  "0x555555566fd8" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555566fd8" -> "0x5555555672d8";
  "0x5555555672d8" [label="=\nType: Assignment Node\nLine: 1"];
  "0x5555555672d8" -> "0x555555567318";
  "0x555555567318" [label="expression\nType: Expression Node\nLine: 1"];
  "0x555555567318" -> "0x555555567358";
  "0x555555567358" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555566f48" -> "0x555555567068";
  "0x555555567068" [label="!b2\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567068" -> "0x5555555671b8";
  "0x5555555671b8" [label="=\nType: Assignment Node\nLine: 1"];
  "0x5555555671b8" -> "0x5555555671f8";
  "0x5555555671f8" [label="expression\nType: Expression Node\nLine: 1"];
  "0x5555555671f8" -> "0x555555567238";
  "0x555555567238" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555566f48" -> "0x555555567418";
  "0x555555567418" [label="!cc\nType: Decimal Literal Node\nLine: 2"];
  "0x555555566f48" -> "0x5555555674b8";
  "0x5555555674b8" [label="!d\nType: Int Variable Declaration Node\nLine: 3"];
  "0x555555566f48" -> "0x5555555674f8";
  "0x5555555674f8" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x5555555674f8" -> "0x555555567578";
  "0x555555567578" [label="expression\nType: Expression Node\nLine: 4"];
  "0x555555567578" -> "0x5555555675b8";
  "0x5555555675b8" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x555555566f48" -> "0x5555555675f8";
  "0x5555555675f8" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x5555555675f8" -> "0x555555567638";
  "0x555555567638" [label="expression\nType: Expression Node\nLine: 5"];
  "0x555555567638" -> "0x555555567698";
  "0x555555567698" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x555555566f48" -> "0x5555555676f8";
  "0x5555555676f8" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x5555555676f8" -> "0x555555567538";
  "0x555555567538" [label="expression\nType: Expression Node\nLine: 6"];
  "0x555555567538" -> "0x5555555677a8";
  "0x5555555677a8" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x555555566f48" -> "0x555555567808";
  "0x555555567808" [label="if\nType: IF Node\nLine: 7"];
  "0x555555567808" -> "0x555555567848";
  "0x555555567848" [label="expression\nType: Expression Node\nLine: 7"];
  "0x555555567848" -> "0x5555555678a8";
  "0x5555555678a8" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555567848" -> "0x555555567908";
  "0x555555567908" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555567808" -> "0x555555567948";
  "0x555555567948" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x555555567948" -> "0x555555567988";
  "0x555555567988" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555567988" -> "0x5555555679e8";
  "0x5555555679e8" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x555555567948" -> "0x555555567a48";
  "0x555555567a48" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555567a48" -> "0x555555567a88";
  "0x555555567a88" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555567808" -> "0x555555567ae8";
  "0x555555567ae8" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x555555567ae8" -> "0x555555567b58";
  "0x555555567b58" [label="expression\nType: Expression Node\nLine: 9"];
  "0x555555567b58" -> "0x555555567b98";
  "0x555555567b98" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x555555567ae8" -> "0x5555555690a8";
  "0x5555555690a8" [label="expression\nType: Expression Node\nLine: 9"];
  "0x5555555690a8" -> "0x5555555690e8";
  "0x5555555690e8" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x555555566f48" -> "0x555555569148";
  "0x555555569148" [label="for\nType: FOR Node\nLine: 10"];
  "0x555555569148" -> "0x5555555691e8";
  "0x5555555691e8" [label="FOR Expression\nType: FOR Statement Node\nLine: 10"];
  "0x5555555691e8" -> "0x555555569248";
  "0x555555569248" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 10"];
  "0x555555569248" -> "0x5555555692a8";
  "0x5555555692a8" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x5555555692a8" -> "0x555555569308";
  "0x555555569308" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569308" -> "0x555555569368";
  "0x555555569368" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x5555555691e8" -> "0x5555555693c8";
  "0x5555555693c8" [label="FOR condition\nType: FOR Statement Node\nLine: 10"];
  "0x5555555691e8" -> "0x5555555694e8";
  "0x5555555694e8" [label="FOR control\nType: FOR Statement Control Node\nLine: 10"];
  "0x555555566f48" -> "0x555555569408";
  "0x555555569408" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569408" -> "0x555555569448";
  "0x555555569448" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569408" -> "0x5555555694a8";
  "0x5555555694a8" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x555555566f48" -> "0x555555569558";
  "0x555555569558" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569558" -> "0x555555569608";
  "0x555555569608" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569558" -> "0x555555569648";
  "0x555555569648" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569558" -> "0x555555569688";
  "0x555555569688" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x555555566f48" -> "0x5555555696f8";
  "0x5555555696f8" [label="block\nType: Block Node\nLine: 10"];
  "0x5555555696f8" -> "0x555555569738";
  "0x555555569738" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x555555569738" -> "0x555555569778";
  "0x555555569778" [label="expression\nType: Expression Node\nLine: 11"];
  "0x555555569778" -> "0x5555555697d8";
  "0x5555555697d8" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x555555569738" -> "0x555555569838";
  "0x555555569838" [label="expression\nType: Expression Node\nLine: 11"];
  "0x555555569838" -> "0x555555569878";
  "0x555555569878" [label="!d\nType: Variable Reference Node\nLine: 11"];
  "0x555555566f48" -> "0x55555556a8e8";
  "0x55555556a8e8" [label="__declaracao\nType: Function Declaration Node\nLine: 14"];
  "0x55555556a8e8" -> "0x55555556a9a8";
  "0x55555556a9a8" [label="block\nType: Block Node\nLine: 14"];
  "0x55555556a9a8" -> "0x55555556aa58";
  "0x55555556aa58" [label="altime\nType: Int Variable Declaration Node\nLine: 15"];
  "0x55555556aa58" -> "0x55555556abb8";
  "0x55555556abb8" [label="=\nType: Assignment Node\nLine: 15"];
  "0x55555556abb8" -> "0x55555556abf8";
  "0x55555556abf8" [label="expression\nType: Expression Node\nLine: 15"];
  "0x55555556abf8" -> "0x55555556ac38";
  "0x55555556ac38" [label="8\nType: Int Literal Node\nLine: 15"];
  "0x55555556a9a8" -> "0x55555556acd8";
  "0x55555556acd8" [label="return\nType: Function Call Node\nLine: 17"];
  "0x55555556acd8" -> "0x55555556ad18";
  "0x55555556ad18" [label="expression\nType: Expression Node\nLine: 17"];
  "0x55555556ad18" -> "0x55555556ad58";
  "0x55555556ad58" [label="!gg\nType: Variable Reference Node\nLine: 17"];
  "0x55555556ad18" -> "0x55555556adb8";
  "0x55555556adb8" [label="8\nType: Int Literal Node\nLine: 17"];
  "0x55555556a9a8" -> "0x55555556adf8";
  "0x55555556adf8" [label="for\nType: FOR Node\nLine: 19"];
  "0x55555556adf8" -> "0x55555556ae68";
  "0x55555556ae68" [label="FOR Expression\nType: FOR Statement Node\nLine: 19"];
  "0x55555556ae68" -> "0x55555556aea8";
  "0x55555556aea8" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 19"];
  "0x55555556aea8" -> "0x55555556af58";
  "0x55555556af58" [label="UTC\nType: Int Variable Declaration Node\nLine: 19"];
  "0x55555556af58" -> "0x55555556b0b8";
  "0x55555556b0b8" [label="=\nType: Assignment Node\nLine: 19"];
  "0x55555556b0b8" -> "0x55555556b0f8";
  "0x55555556b0f8" [label="expression\nType: Expression Node\nLine: 19"];
  "0x55555556b0f8" -> "0x55555556b138";
  "0x55555556b138" [label="1\nType: Int Literal Node\nLine: 19"];
  "0x55555556ae68" -> "0x55555556b1d8";
  "0x55555556b1d8" [label="FOR condition\nType: FOR Statement Node\nLine: 19"];
  "0x55555556ae68" -> "0x55555556b2d8";
  "0x55555556b2d8" [label="FOR control\nType: FOR Statement Control Node\nLine: 19"];
  "0x55555556a9a8" -> "0x55555556b218";
  "0x55555556b218" [label="expression\nType: Expression Node\nLine: 19"];
  "0x55555556b218" -> "0x55555556b258";
  "0x55555556b258" [label="!i\nType: Variable Reference Node\nLine: 19"];
  "0x55555556b218" -> "0x55555556b298";
  "0x55555556b298" [label="20\nType: Int Literal Node\nLine: 19"];
  "0x55555556a9a8" -> "0x55555556b348";
  "0x55555556b348" [label="expression\nType: Expression Node\nLine: 19"];
  "0x55555556b348" -> "0x55555556b3c8";
  "0x55555556b3c8" [label="!i\nType: Variable Reference Node\nLine: 19"];
  "0x55555556b348" -> "0x55555556b408";
  "0x55555556b408" [label="!i\nType: Variable Reference Node\nLine: 19"];
  "0x55555556b348" -> "0x55555556b448";
  "0x55555556b448" [label="1\nType: Int Literal Node\nLine: 19"];
  "0x55555556a9a8" -> "0x55555556b4b8";
  "0x55555556b4b8" [label="block\nType: Block Node\nLine: 19"];
  "0x55555556b4b8" -> "0x55555556b4f8";
  "0x55555556b4f8" [label="\nType: Int Variable Declaration Node\nLine: 20"];
  "0x55555556b4f8" -> "0x55555556b658";
  "0x55555556b658" [label="=\nType: Assignment Node\nLine: 20"];
  "0x55555556b658" -> "0x55555556b698";
  "0x55555556b698" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556b698" -> "0x55555556b6d8";
  "0x55555556b6d8" [label="0\nType: Int Literal Node\nLine: 20"];
  "0x55555556b4b8" -> "0x55555556b778";
  "0x55555556b778" [label="!lpa\nType: Assignment Node\nLine: 22"];
  "0x55555556b778" -> "0x55555556b7b8";
  "0x55555556b7b8" [label="expression\nType: Expression Node\nLine: 22"];
  "0x55555556b7b8" -> "0x55555556b7f8";
  "0x55555556b7f8" [label="!lpa\nType: Variable Reference Node\nLine: 22"];
  "0x55555556b7b8" -> "0x55555556b858";
  "0x55555556b858" [label="1\nType: Int Literal Node\nLine: 22"];
  "0x55555556a9a8" -> "0x55555556b898";
  "0x55555556b898" [label="for\nType: FOR Node\nLine: 25"];
  "0x55555556b898" -> "0x55555556b388";
  "0x55555556b388" [label="FOR Expression\nType: FOR Statement Node\nLine: 25"];
  "0x55555556b388" -> "0x55555556b948";
  "0x55555556b948" [label="FOR empty initialization\nType: FOR Statement Empty Initialization Node\nLine: 25"];
  "0x55555556b388" -> "0x55555556b9a8";
  "0x55555556b9a8" [label="FOR empty condition\nType: FOR Statement Empty Condition Node\nLine: 25"];
  "0x55555556b388" -> "0x55555556b9e8";
  "0x55555556b9e8" [label="FOR empty control\nType: FOR Statement Empty Control Node\nLine: 25"];
  "0x55555556a9a8" -> "0x55555556ba58";
  "0x55555556ba58" [label="block\nType: Block Node\nLine: 25"];
}
