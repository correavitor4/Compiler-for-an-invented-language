digraph AST {
  node [shape=box, style=filled, color="#E0E0E0"];
  "0x555555565608" [label="NULL\nType: Root Node\nLine: 0"];
  "0x555555565608" -> "0x555555567008";
  "0x555555567008" [label="block\nType: Block Node\nLine: 0"];
  "0x555555567008" -> "0x5555555670b8";
  "0x5555555670b8" [label="!a\nType: Int Variable Declaration Node\nLine: 1"];
  "0x5555555670b8" -> "0x555555567498";
  "0x555555567498" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567498" -> "0x5555555674f8";
  "0x5555555674f8" [label="expression\nType: Expression Node\nLine: 1"];
  "0x5555555674f8" -> "0x555555567558";
  "0x555555567558" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567008" -> "0x555555567168";
  "0x555555567168" [label="!b2\nType: Int Variable Declaration Node\nLine: 1"];
  "0x555555567168" -> "0x555555567318";
  "0x555555567318" [label="=\nType: Assignment Node\nLine: 1"];
  "0x555555567318" -> "0x555555567378";
  "0x555555567378" [label="expression\nType: Expression Node\nLine: 1"];
  "0x555555567378" -> "0x5555555673d8";
  "0x5555555673d8" [label="7\nType: Int Literal Node\nLine: 1"];
  "0x555555567008" -> "0x555555567638";
  "0x555555567638" [label="!cc\nType: Decimal Literal Node\nLine: 2"];
  "0x555555567008" -> "0x5555555676f8";
  "0x5555555676f8" [label="!d\nType: Int Variable Declaration Node\nLine: 3"];
  "0x555555567008" -> "0x555555567738";
  "0x555555567738" [label="!b2\nType: Assignment Node\nLine: 4"];
  "0x555555567738" -> "0x5555555677b8";
  "0x5555555677b8" [label="expression\nType: Expression Node\nLine: 4"];
  "0x5555555677b8" -> "0x555555567838";
  "0x555555567838" [label="!a\nType: Variable Reference Node\nLine: 4"];
  "0x555555567008" -> "0x5555555678b8";
  "0x5555555678b8" [label="escreva\nType: Function Call Node\nLine: 5"];
  "0x5555555678b8" -> "0x555555567918";
  "0x555555567918" [label="expression\nType: Expression Node\nLine: 5"];
  "0x555555567918" -> "0x555555567998";
  "0x555555567998" [label="Escreva um número \nType: Text Literal Node\nLine: 5"];
  "0x555555567008" -> "0x5555555679f8";
  "0x5555555679f8" [label="leia\nType: Function Call Node\nLine: 6"];
  "0x5555555679f8" -> "0x555555567778";
  "0x555555567778" [label="expression\nType: Expression Node\nLine: 6"];
  "0x555555567778" -> "0x555555567ae8";
  "0x555555567ae8" [label="!a\nType: Variable Reference Node\nLine: 6"];
  "0x555555567008" -> "0x555555567b68";
  "0x555555567b68" [label="if\nType: IF Node\nLine: 7"];
  "0x555555567b68" -> "0x555555569148";
  "0x555555569148" [label="expression\nType: Expression Node\nLine: 7"];
  "0x555555569148" -> "0x5555555691c8";
  "0x5555555691c8" [label="!a\nType: Variable Reference Node\nLine: 7"];
  "0x555555569148" -> "0x555555569248";
  "0x555555569248" [label="!b2\nType: Variable Reference Node\nLine: 7"];
  "0x555555567b68" -> "0x5555555692a8";
  "0x5555555692a8" [label="if_inline_block\nType: IF Inline Execution Code Node\nLine: 8"];
  "0x5555555692a8" -> "0x555555569308";
  "0x555555569308" [label="escreva\nType: Function Call Node\nLine: 8"];
  "0x555555569308" -> "0x555555569388";
  "0x555555569388" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569388" -> "0x555555569408";
  "0x555555569408" [label=" A é maior\nType: Text Literal Node\nLine: 8"];
  "0x555555569308" -> "0x555555569488";
  "0x555555569488" [label="expression\nType: Expression Node\nLine: 8"];
  "0x555555569488" -> "0x5555555694e8";
  "0x5555555694e8" [label="!a\nType: Variable Reference Node\nLine: 8"];
  "0x555555567b68" -> "0x555555569568";
  "0x555555569568" [label="escreva\nType: Function Call Node\nLine: 9"];
  "0x555555569568" -> "0x5555555695f8";
  "0x5555555695f8" [label="expression\nType: Expression Node\nLine: 9"];
  "0x5555555695f8" -> "0x555555569658";
  "0x555555569658" [label="B é maior\nType: Text Literal Node\nLine: 9"];
  "0x555555569568" -> "0x5555555696d8";
  "0x5555555696d8" [label="expression\nType: Expression Node\nLine: 9"];
  "0x5555555696d8" -> "0x555555569738";
  "0x555555569738" [label="!b2\nType: Variable Reference Node\nLine: 9"];
  "0x555555567008" -> "0x5555555697b8";
  "0x5555555697b8" [label="for\nType: FOR Node\nLine: 10"];
  "0x5555555697b8" -> "0x555555569878";
  "0x555555569878" [label="FOR Expression\nType: FOR Statement Node\nLine: 10"];
  "0x555555569878" -> "0x5555555698f8";
  "0x5555555698f8" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 10"];
  "0x5555555698f8" -> "0x555555569988";
  "0x555555569988" [label="!d\nType: Assignment Node\nLine: 10"];
  "0x555555569988" -> "0x555555569a08";
  "0x555555569a08" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569a08" -> "0x555555569a88";
  "0x555555569a88" [label="1\nType: Int Literal Node\nLine: 10"];
  "0x555555569878" -> "0x555555569b08";
  "0x555555569b08" [label="FOR condition\nType: FOR Statement Node\nLine: 10"];
  "0x555555569878" -> "0x555555569ca8";
  "0x555555569ca8" [label="FOR control\nType: FOR Statement Control Node\nLine: 10"];
  "0x5555555697b8" -> "0x555555569f58";
  "0x555555569f58" [label="block\nType: Block Node\nLine: 10"];
  "0x555555569f58" -> "0x555555569f98";
  "0x555555569f98" [label="escreva\nType: Function Call Node\nLine: 11"];
  "0x555555569f98" -> "0x55555556a018";
  "0x55555556a018" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556a018" -> "0x55555556a098";
  "0x55555556a098" [label="D\nType: Text Literal Node\nLine: 11"];
  "0x555555569f98" -> "0x55555556a118";
  "0x55555556a118" [label="expression\nType: Expression Node\nLine: 11"];
  "0x55555556a118" -> "0x55555556a178";
  "0x55555556a178" [label="!d\nType: Variable Reference Node\nLine: 11"];
  "0x555555567008" -> "0x555555569b68";
  "0x555555569b68" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569b68" -> "0x555555569bc8";
  "0x555555569bc8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569b68" -> "0x555555569c48";
  "0x555555569c48" [label="100\nType: Int Literal Node\nLine: 10"];
  "0x555555567008" -> "0x555555569d38";
  "0x555555569d38" [label="expression\nType: Expression Node\nLine: 10"];
  "0x555555569d38" -> "0x555555569de8";
  "0x555555569de8" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569d38" -> "0x555555569e68";
  "0x555555569e68" [label="!d\nType: Variable Reference Node\nLine: 10"];
  "0x555555569d38" -> "0x555555569ec8";
  "0x555555569ec8" [label="2\nType: Int Literal Node\nLine: 10"];
  "0x555555567008" -> "0x55555556b238";
  "0x55555556b238" [label="__declaracao\nType: Function Declaration Node\nLine: 14"];
  "0x55555556b238" -> "0x55555556b298";
  "0x55555556b298" [label="block\nType: Block Node\nLine: 14"];
  "0x55555556b298" -> "0x55555556b368";
  "0x55555556b368" [label="!gg\nType: Int Variable Declaration Node\nLine: 15"];
  "0x55555556b368" -> "0x55555556b528";
  "0x55555556b528" [label="=\nType: Assignment Node\nLine: 15"];
  "0x55555556b528" -> "0x55555556b588";
  "0x55555556b588" [label="expression\nType: Expression Node\nLine: 15"];
  "0x55555556b588" -> "0x55555556b5e8";
  "0x55555556b5e8" [label="8\nType: Int Literal Node\nLine: 15"];
  "0x55555556b298" -> "0x55555556b6d8";
  "0x55555556b6d8" [label="!hg\nType: Int Variable Declaration Node\nLine: 16"];
  "0x55555556b6d8" -> "0x55555556b878";
  "0x55555556b878" [label="=\nType: Assignment Node\nLine: 16"];
  "0x55555556b878" -> "0x55555556b8d8";
  "0x55555556b8d8" [label="expression\nType: Expression Node\nLine: 16"];
  "0x55555556b8d8" -> "0x55555556b938";
  "0x55555556b938" [label="9\nType: Int Literal Node\nLine: 16"];
  "0x55555556b298" -> "0x55555556b9f8";
  "0x55555556b9f8" [label="return\nType: Function Call Node\nLine: 18"];
  "0x55555556b9f8" -> "0x55555556ba68";
  "0x55555556ba68" [label="expression\nType: Expression Node\nLine: 18"];
  "0x55555556ba68" -> "0x55555556bac8";
  "0x55555556bac8" [label="!gg\nType: Variable Reference Node\nLine: 18"];
  "0x55555556ba68" -> "0x55555556bb48";
  "0x55555556bb48" [label="8\nType: Int Literal Node\nLine: 18"];
  "0x55555556b298" -> "0x55555556bba8";
  "0x55555556bba8" [label="for\nType: FOR Node\nLine: 20"];
  "0x55555556bba8" -> "0x55555556bc08";
  "0x55555556bc08" [label="FOR Expression\nType: FOR Statement Node\nLine: 20"];
  "0x55555556bc08" -> "0x55555556bc88";
  "0x55555556bc88" [label="FOR initialization\nType: FOR Statement Initialization Node\nLine: 20"];
  "0x55555556bc88" -> "0x55555556bd68";
  "0x55555556bd68" [label="!i\nType: Int Variable Declaration Node\nLine: 20"];
  "0x55555556bd68" -> "0x55555556bf28";
  "0x55555556bf28" [label="=\nType: Assignment Node\nLine: 20"];
  "0x55555556bf28" -> "0x55555556bf88";
  "0x55555556bf88" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556bf88" -> "0x55555556bfe8";
  "0x55555556bfe8" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556bc08" -> "0x55555556c0a8";
  "0x55555556c0a8" [label="FOR condition\nType: FOR Statement Node\nLine: 20"];
  "0x55555556bc08" -> "0x55555556c268";
  "0x55555556c268" [label="FOR control\nType: FOR Statement Control Node\nLine: 20"];
  "0x55555556bba8" -> "0x55555556c4a8";
  "0x55555556c4a8" [label="block\nType: Block Node\nLine: 20"];
  "0x55555556c4a8" -> "0x55555556c508";
  "0x55555556c508" [label="!lpa\nType: Int Variable Declaration Node\nLine: 21"];
  "0x55555556c508" -> "0x55555556c6c8";
  "0x55555556c6c8" [label="=\nType: Assignment Node\nLine: 21"];
  "0x55555556c6c8" -> "0x55555556c728";
  "0x55555556c728" [label="expression\nType: Expression Node\nLine: 21"];
  "0x55555556c728" -> "0x55555556c788";
  "0x55555556c788" [label="0\nType: Int Literal Node\nLine: 21"];
  "0x55555556c4a8" -> "0x55555556c848";
  "0x55555556c848" [label="!lpa\nType: Assignment Node\nLine: 23"];
  "0x55555556c848" -> "0x55555556c888";
  "0x55555556c888" [label="expression\nType: Expression Node\nLine: 23"];
  "0x55555556c888" -> "0x55555556c908";
  "0x55555556c908" [label="!lpa\nType: Variable Reference Node\nLine: 23"];
  "0x55555556c888" -> "0x55555556c988";
  "0x55555556c988" [label="1\nType: Int Literal Node\nLine: 23"];
  "0x55555556b298" -> "0x55555556c0e8";
  "0x55555556c0e8" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c0e8" -> "0x55555556c188";
  "0x55555556c188" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c0e8" -> "0x55555556c208";
  "0x55555556c208" [label="20\nType: Int Literal Node\nLine: 20"];
  "0x55555556b298" -> "0x55555556c2f8";
  "0x55555556c2f8" [label="expression\nType: Expression Node\nLine: 20"];
  "0x55555556c2f8" -> "0x55555556c338";
  "0x55555556c338" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c2f8" -> "0x55555556c3b8";
  "0x55555556c3b8" [label="!i\nType: Variable Reference Node\nLine: 20"];
  "0x55555556c2f8" -> "0x55555556c418";
  "0x55555556c418" [label="1\nType: Int Literal Node\nLine: 20"];
  "0x55555556b298" -> "0x55555556c9e8";
  "0x55555556c9e8" [label="for\nType: FOR Node\nLine: 26"];
  "0x55555556c9e8" -> "0x55555556c148";
  "0x55555556c148" [label="FOR Expression\nType: FOR Statement Node\nLine: 26"];
  "0x55555556c148" -> "0x55555556cad8";
  "0x55555556cad8" [label="FOR empty initialization\nType: FOR Statement Empty Initialization Node\nLine: 26"];
  "0x55555556c148" -> "0x55555556cb68";
  "0x55555556cb68" [label="FOR empty condition\nType: FOR Statement Empty Condition Node\nLine: 26"];
  "0x55555556c148" -> "0x55555556cbd8";
  "0x55555556cbd8" [label="FOR empty control\nType: FOR Statement Empty Control Node\nLine: 26"];
  "0x55555556c9e8" -> "0x55555556cc78";
  "0x55555556cc78" [label="block\nType: Block Node\nLine: 26"];
}
